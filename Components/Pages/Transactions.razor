@page "/transactions"
@using Coursework.Models
@inject UserService UserService
@inject IJSRuntime JSRuntime

<h1>User Transactions</h1>

<!-- Add a message for insufficient balance -->
@if (insufficientBalance)
{
    <div class="alert alert-danger">
        Insufficient balance to complete the transaction.
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>Transaction ID</th>
            <th>Total Balance</th>
            <th>Type</th>
            <th>Debit</th>
            <th>Credit</th>
            <th>Tags</th>
            <th>Date</th>
            <th>Note</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in Data.Transactions)
        {
            <tr>
                <td>@transaction.Id</td>
                <td>@TotalBalance</td> <!-- Display Total Balance -->
                <td>@transaction.Type</td>
                <td>@transaction.Debit</td>
                <td>@transaction.Credit</td>
                <td>@string.Join(", ", transaction.Tags ?? new List<string>())</td>
                <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                <td>@transaction.Description</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => EditTransaction(transaction)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteTransaction(transaction.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h2>@(isEditMode ? "Edit" : "Add New") Transaction</h2>
<EditForm Model="newTransaction" OnValidSubmit="HandleTransactionSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="type">Transaction Type</label>
        <InputSelect id="type" @bind-Value="newTransaction.Type" class="form-control" @onchange="OnTransactionTypeChange">
            <option value="">Select Type</option>
            <option value="Credit">Inflow</option>
            <option value="Debit">Outflow</option>
        </InputSelect>
    </div>

    @if (newTransaction.Type == "Credit")
    {
        <div class="form-group">
            <label for="credit">Inflow Amount</label>
            <InputNumber id="credit" @bind-Value="newTransaction.Credit" class="form-control" />
        </div>

        <div class="form-group">
            <label for="tags">Tags</label>
            <select multiple class="form-control" @onchange="OnTagsChange">
                @foreach (var tag in defaultTags)
                {
                    <option value="@tag" selected="@(selectedTags.Contains(tag))">@tag</option>
                }
            </select>
        </div>
    }

    @if (newTransaction.Type == "Debit")
    {
        <div class="form-group">
            <label for="debit">Outflow Amount</label>
            <InputNumber id="debit" @bind-Value="newTransaction.Debit" class="form-control" />
        </div>
    }

    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="newTransaction.Description" class="form-control" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary" disabled="@(!CanSubmitTransaction())">
            @(isEditMode ? "Update" : "Add") Transaction
        </button>
    </div>
</EditForm>

@code {
    private AppData Data;
    private Transaction newTransaction = new Transaction();
    private List<string> defaultTags = new List<string>
    {
        "Yearly", "Monthly", "Food", "Drinks", "Clothes", "Gadgets", "Miscellaneous", "Fuel", "Rent", "EMI", "Party"
    };

    private List<string> selectedTags = new List<string>();
    private bool isEditMode = false;
    private decimal TotalBalance;
    private bool insufficientBalance = false;

    protected override void OnInitialized()
    {
        Data = UserService.LoadData();
        // Total Balance Calculation
        TotalBalance = Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit) +
                       (Data.Debts?.Sum(d => d.DebtAmount) ?? 0) - (Data.Debts?.Sum(d => d.PaidAmount) ?? 0);
    }

    private void HandleTransactionSubmit()
    {
        // Check for insufficient balance for debit transactions
        if (newTransaction.Type == "Debit" && newTransaction.Debit > TotalBalance)
        {
            insufficientBalance = true; // Show insufficient balance message
            return; // Prevent submission
        }
        else
        {
            insufficientBalance = false; // Reset the warning message
        }

        // Handle adding or editing the transaction
        if (isEditMode)
        {
            var transaction = Data.Transactions.FirstOrDefault(t => t.Id == newTransaction.Id);
            if (transaction != null)
            {
                transaction.Type = newTransaction.Type;
                transaction.Credit = newTransaction.Credit;
                transaction.Debit = newTransaction.Debit;
                transaction.Tags = new List<string>(selectedTags);
                transaction.Description = newTransaction.Description;
            }
        }
        else
        {
            newTransaction.Id = Data.Transactions.Count + 1;
            newTransaction.Tags = new List<string>(selectedTags);
            Data.Transactions.Add(newTransaction);
        }

        // Recalculate Total Balance after adding/updating transaction
        TotalBalance = Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit) +
                       (Data.Debts?.Sum(d => d.DebtAmount) ?? 0) - (Data.Debts?.Sum(d => d.PaidAmount) ?? 0);

        UserService.SaveData(Data);
        newTransaction = new Transaction { Date = DateTime.Now };
        selectedTags.Clear();
        isEditMode = false;
    }

    private void OnTransactionTypeChange(ChangeEventArgs e)
    {
        newTransaction.Type = e.Value.ToString();
    }

    private void OnTagsChange(ChangeEventArgs e)
    {
        if (e.Value is IEnumerable<string> selected)
        {
            selectedTags = selected.ToList();
        }
    }

    private bool CanSubmitTransaction()
    {
        return !string.IsNullOrEmpty(newTransaction.Type) && !string.IsNullOrEmpty(newTransaction.Description) &&
               (newTransaction.Type == "Credit" ? newTransaction.Credit > 0 : newTransaction.Debit > 0);
    }

    private void EditTransaction(Transaction transaction)
    {
        newTransaction = new Transaction
            {
                Id = transaction.Id,
                Type = transaction.Type,
                Credit = transaction.Credit,
                Debit = transaction.Debit,
                Tags = new List<string>(transaction.Tags ?? new List<string>()),
                Date = transaction.Date,
                Description = transaction.Description
            };
        selectedTags = new List<string>(transaction.Tags ?? new List<string>());
        isEditMode = true;
    }

    private void DeleteTransaction(int id)
    {
        var transaction = Data.Transactions.FirstOrDefault(t => t.Id == id);
        if (transaction != null)
        {
            Data.Transactions.Remove(transaction);
            // Recalculate Total Balance after deleting transaction
            TotalBalance = Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit) +
                           (Data.Debts?.Sum(d => d.DebtAmount) ?? 0) - (Data.Debts?.Sum(d => d.PaidAmount) ?? 0);

            UserService.SaveData(Data);
        }
    }
}
<style>

    /* General Page Styling */
    body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
        color: #333;
        margin: 0;
        padding: 0;
    }

    /* Heading Styles */
    h1 {
        text-align: center;
        color: #007bff;
        margin-bottom: 20px;
    }

    h2 {
        color: #0056b3;
        margin-top: 30px;
    }

    /* Table Styles */
    .table {
        width: 100%;
        margin: 20px auto;
        border-collapse: collapse;
        background-color: #ffffff;
        border: 1px solid #dee2e6;
    }

        .table th,
        .table td {
            text-align: left;
            padding: 10px;
            border: 1px solid #dee2e6;
        }

        .table th {
            background-color: #007bff;
            color: white;
            text-transform: uppercase;
            font-size: 14px;
        }

        .table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        .table tr:hover {
            background-color: #d9edf7;
        }

    /* Form Styles */
    form {
        width: 50%;
        margin: 20px auto;
        padding: 15px;
        background-color: #ffffff;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }

    input[type="text"],
    input[type="number"],
    select,
    button {
        width: 100%;
        padding: 10px;
        margin-top: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
    }

    /* Button Styles */

    /* Button Styles */
    button {
        background-color: #007bff;
        color: white;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        button:hover {
            background-color: #0056b3;
        }

        /* Edit Button Styling */
        button.btn-warning {
            background-color: #17a2b8; /* Light Blue */
            color: white;
        }

            button.btn-warning:hover {
                background-color: #138496; /* Darker Blue */
            }

        /* Delete Button Styling */
        button.btn-danger {
            background-color: #e74c3c; /* Red */
            color: white;
        }

            button.btn-danger:hover {
                background-color: #c0392b; /* Darker Red */
            }


    /* Error Message Styling */
    .text-danger {
        color: #dc3545;
        font-size: 12px;
    }

    /* Multi-select Styling */
    select[multiple] {
        height: 100px;
    }

</style>